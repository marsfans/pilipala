name: Build and release NGINX

on:
  workflow_dispatch:
    inputs:
      nginx_version:
        description: 'NGINX version to build (e.g. 1.26.4)'
        required: true
        default: '1.26.4'
      release_name:
        description: 'Release name (optional)'
        required: false
        default: ''

jobs:
  build-linux:
    name: Build (linux)
    runs-on: ubuntu-latest
    outputs:
      artifact: ${{ steps.upload.outputs.artifact }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup environment variables
      run: |
        echo "NGINX_VERSION=${{ github.event.inputs.nginx_version }}" >> $GITHUB_ENV

    - name: Make scripts executable
      run: chmod +x scripts/*.sh

    - name: Build NGINX (linux)
      run: |
        scripts/build-nginx-unix.sh linux

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: nginx-linux-${{ github.event.inputs.nginx_version }}
        path: dist/nginx-*-linux-*.tar.gz
      id: upload

  build-macos:
    name: Build (macos)
    runs-on: macos-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup environment variables
      run: |
        echo "NGINX_VERSION=${{ github.event.inputs.nginx_version }}" >> $GITHUB_ENV

    - name: Make scripts executable
      run: chmod +x scripts/*.sh

    - name: Build NGINX (macos)
      run: |
        scripts/build-nginx-unix.sh macos

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: nginx-macos-${{ github.event.inputs.nginx_version }}
        path: dist/nginx-*-macos-*.tar.gz

  build-windows:
    name: Build (windows)
    runs-on: windows-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set NGINX_VERSION
      run: echo "NGINX_VERSION=${{ github.event.inputs.nginx_version }}" >> $Env:GITHUB_ENV

    - name: Build NGINX (windows)
      shell: pwsh
      run: |
        Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process
        .\scripts\build-nginx-windows.ps1

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: nginx-windows-${{ github.event.inputs.nginx_version }}
        path: dist\nginx-*-windows-*.zip

  release:
    name: Create Release and upload assets
    runs-on: ubuntu-latest
    needs: [build-linux, build-macos, build-windows]
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download linux artifact
      uses: actions/download-artifact@v4
      with:
        name: nginx-linux-${{ github.event.inputs.nginx_version }}
        path: artifacts/linux

    - name: Download macos artifact
      uses: actions/download-artifact@v4
      with:
        name: nginx-macos-${{ github.event.inputs.nginx_version }}
        path: artifacts/macos

    - name: Download windows artifact
      uses: actions/download-artifact@v4
      with:
        name: nginx-windows-${{ github.event.inputs.nginx_version }}
        path: artifacts/windows

    - name: Prepare release name
      run: |
        if [ -z "${{ github.event.inputs.release_name }}" ]; then
          echo "RELEASE_NAME=nginx-${{ github.event.inputs.nginx_version }}" >> $GITHUB_ENV
        else
          echo "RELEASE_NAME=${{ github.event.inputs.release_name }}" >> $GITHUB_ENV
        fi

    - name: Create GitHub Release (draft)
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "nginx-${{ github.event.inputs.nginx_version }}"
        release_name: ${{ env.RELEASE_NAME }}
        body: "Automated build of NGINX ${{ github.event.inputs.nginx_version }} for linux/macos/windows"
        draft: false
        prerelease: false

    - name: Upload linux asset
      uses: actions/upload-release-asset@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/linux/$(ls artifacts/linux | head -n1)
        asset_name: $(ls artifacts/linux | head -n1)
        asset_content_type: application/gzip

    - name: Upload macos asset
      uses: actions/upload-release-asset@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/macos/$(ls artifacts/macos | head -n1)
        asset_name: $(ls artifacts/macos | head -n1)
        asset_content_type: application/gzip

    - name: Upload windows asset
      uses: actions/upload-release-asset@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/windows/$(ls artifacts/windows | head -n1)
        asset_name: $(ls artifacts/windows | head -n1)
        asset_content_type: application/zip
